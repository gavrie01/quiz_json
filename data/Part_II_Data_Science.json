[
 {
    "question": "The ... assumes that all features in the input data are independent of each other (in ideal world)",
    "options": ["Naive Bayes classifier", "Random Forest Classifier", "SVM"],
    "correct_answer": "Naive Bayes classifier"
  },
  {
    "question": "Independent feature is a:",
    "options": ["Predictor", "Target Variable"],
    "correct_answer": "Predictor"
  },
  {
    "question": "Dependent fetature is a",
    "options": ["Target Variable", "Predictor"],
    "correct_answer": "Target Variable"
  },
  {
    "question": "What function is used to remove missing values in pandas?",
    "options": ["remove_na()", "drop_na()", "dropna()"],
    "correct_answer": "dropna()"
  },
  {
    "question": "What is <strongest>dot(scalar) product</strong> for vetors A = [a₁, a₂, a₃] and B = [b₁, b₂, b₃]) ",
    "options": ["⚫ =a₁b₁+a₂b₂+a₃b₃", "⚫ = [a₁b₁,a₂b₂,a₃b₃]"],
    "correct_answer": "⚫ =a₁b₁+a₂b₂+a₃b₃"
  },
  {
    "question": "how can i get a dot product of two tensors in Pytorch?",
    "options": ["torch.dot() / torch.matmul()", "there is not specific function", "apply torch.matmul() over torch.dot()"],
    "correct_answer": "torch.dot() / torch.matmul()"
  },
  {
    "question": "In PyTorch the notation i.e.(7, 7) usually refers to",
    "options": ["the shape or dimensions of a tensor, not the values", "to the values, because the first coordinate is [0,0] by default"],
    "correct_answer": "the shape or dimensions of a tensor, not the values"
  },
  {
    "question": "Streamlit library (the latest in 2023 - 1.28.0) allows to upload json size of:",
    "options": ["200MB", "100MB", "unlimited, it uploads by chunks"],
    "correct_answer": "200MB"
  },
  {
    "question": "Hadamard product is",
    "options": ["element-wise multiplication of tensors", "another term for dot product"],
    "correct_answer": "element-wise multiplication of tensors"
  },
  {
    "question": "PyTorch mean() does not work with long dtype, tensor should be converted into another dtype",
    "options": ["No, mean() does not work with float64", "Yes, mean() works with float64" ],
    "correct_answer": "No, mean() does not work with float64"
  },
  {
    "question": "In PyTorch, torch.stack([x,y,x,y], dim =1) is a",
    "options": ["vertical stacking of two tensors", "horizontal stacking of two tensors"],
    "correct_answer": "vertical stacking of two tensors"
  },
  {
    "question": "How to convert numPy array into tensor?",
    "options": ["numpy array can be used as tensor, because multidimensional array is a tensor", "torch.numpy(ndarray)"],
    "correct_answer": "torch.numpy(ndarray)"
  },
  {
    "question": "Assuming A and B are random tensors, can I compare them like <strong>A == B</strong>)",
    "options": ["no, comparison should be element-wise via looping", "yes, it is True /False element-wise comparison"],
    "correct_answer": "yes, it is True /False element-wise comparison"
  },
  {
    "question": "In PyTorch, the torch.manual_seed() function is used to set the random seed for the entire PyTorch environment",
    "options": ["Yes", "No"],
    "correct_answer": "Yes"
  },
  {
    "question": "random_seed() makes reproducable randomness out of randomness",
    "options": ["False", "True"],
    "correct_answer": "True"
  },
  {
    "question": "Running tensors and PyTorch objects on GPUs makes computation faster",
    "options": ["Yes!", "No, CPU and GPU give nearly the same time of computation"],
    "correct_answer": "Yes!"
  },
  {
    "question": "Machine Learning models work with numerical data representation",
    "options": ["Yes, all the input data is numerical / encoded", "No, such models like RandomForestClassifier use text as input"],
    "correct_answer": "Yes, all the input data is numerical / encoded"
  },
  {
    "question": "An ensemble model in machine learning refers to a",
    "options": ["technique where multiple individual models are combined to create a stronger, robust model", "single powerful model that incorporates all possible features and algorithms, aiming to eliminate the need for combining multiple models"],
    "correct_answer": "technique where multiple individual models are combined to create a stronger, robust model"
  },
  {
    "question": "There are several types of ensemble methods, but two of the most common are",
    "options": ["Boosting & Bagging", "Voting Classifiers/Regressors & GBM"],
    "correct_answer": "Boosting & Bagging"
  },
  {
    "question": "GPT stands for",
    "options": ["Generative Pre-trained Transformers", "Global Positioning Technology"],
    "correct_answer": "Generative Pre-trained Transformers"
  },
  {
    "question": "In 'GPT' Transformers mean",
    "options": ["Generally speaking it is a specific type of architecture", "Transactional Providers", "Transmitting Formulators"],
    "correct_answer": "Generally speaking it is a specific type of architecture"
  },
  {
    "question": "MySQL, Oracle, PostgreSQL are examples of:",
    "options": ["Time-Series DB", "NoSQL DB", "Relational DB"],
    "correct_answer": "Relational DB"
  },
  {
    "question": "InfluxDB, Graphite, Prometheus, TimescaleDB are examples of:",
    "options": ["Time-Series DB", "NoSQL DB", "Relational DB"],
    "correct_answer": "Time-Series DB"
  },
  {
    "question": "MongoDB, Cassandra, Redis, Couchbase are examples of:",
    "options": ["Time-Series DB", "NoSQL DB", "Relational DB"],
    "correct_answer": "NoSQL DB"
  },
  {
    "question": "Key-Value approach points to",
    "options": ["Time-Series DB", "NoSQL DB", "Relational DB"],
    "correct_answer": "NoSQL DB"
  },
  {
    "question": "Data Lake is ....",
    "options": ["another yet DB type, like Time-Series DB, etc", "storage repository that can hold vast amounts of data", "a lot of different data which swims in a Lake"],
    "correct_answer": "storage repository that can hold vast amounts of data"
  },
  {
    "question": "Data in Data Lakes is stored as",
    "options": ["raw data in its native format", "structured tables similar to relational databases", "executable program files"],
    "correct_answer": "raw data in its native format"
  },
  {
    "question": "LZ4, Zstd, Snappy",
    "options": ["machine learning models", "data compression algorithms", "transformers"],
    "correct_answer": "data compression algorithms"
  },
  {
    "question": "LZ4 has ... type",
    "options": ["general purpose", "fast compression"],
    "correct_answer": "fast compression"
  },
  {
    "question": "torch.nn.Module is",
    "options": ["base class for audio and video processing", "base class for all neural network models", "specific to handling image data"],
    "correct_answer": "base class for all neural network models"
  },
  {
    "question": "Default dtype for PyTorch tensor <strong>torch.float</strong> is",
    "options": ["float16", "float64", "float32"],
    "correct_answer": "float32"
  },
  {
    "question": "How to check parameters of a model i.e. <strong>model_0 = LinearRegressionModel()</strong>",
    "options": ["model_0.parameters()", "list(model_0.parameters())", "model_0.Parameters"],
    "correct_answer": "list(model_0.parameters())"
  },
  {
    "question": "How to check named parameters of a model i.e. <strong>model_0 = LinearRegressionModel()</strong>",
    "options": ["model_0.named_parameters", "model_0.state_dict()"],
    "correct_answer": "model_0.state_dict()"
  },
  {
    "question": "What does <strong>inference</strong> mean in context of machine learning?",
    "options": ["optimization of gradient descent during training", "process of making predictions or drawing conclusions from a trained model based on unseen data"],
    "correct_answer": "process of making predictions or drawing conclusions from a trained model based on unseen data"
  },
  {
    "question": "what does torch.inference_mode() do",
    "options": ["tracks gradient descent", "turns gradient descent tracking off"],
    "correct_answer": "turns gradient descent tracking off"
  }


]
