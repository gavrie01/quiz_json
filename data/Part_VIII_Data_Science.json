[
    {
       "question": "'Bidirectional' in BERT means",
       "options": ["training on both the left and right context of a masked word, BERT learns bidirectional representations", "I do not know"],
       "correct_answer": "training on both the left and right context of a masked word, BERT learns bidirectional representations"
     },
     {
      "question": "How does BERT define which words to mask?",
      "options": ["selects some percentage randomly", "it is a hyperparameter"],
      "correct_answer": "selects some percentage randomly"
    },
    {
      "question": "Instead masked word BERT puts 'MASK' token",
      "options": ["Yes", "No, it removes words and puts them into special dictionary"],
      "correct_answer": "Yes"
    },
    {
      "question": "'sings', 'sung', 'sang' are forms of the word 'sing', the word 'sing' is common ... of these words",
      "options": ["lemma", "tokenization"],
      "correct_answer": "lemma"
    },
    {
      "question": "Tokenization, Lemmatization, Stemming, Sentence Segmentation all together are",
      "options": ["Text Normalization", "Lookahead assertions"],
      "correct_answer": "Text Normalization"
    },
    {
      "question": "Stripping suffixes from the end of the word is",
      "options": ["stemming", "lemmatization"],
      "correct_answer": "stemming"
    },
    {
      "question": "Stemming is essential for morphologically complex languages, like Arabic",
      "options": ["Yes", "No, languages with complex morphology are out of scope of AI, it is too complex for them"],
      "correct_answer": "Yes"
    },
    {
      "question": "Sentence segmentation is",
      "options": ["breaking down text into individual sentences", "searching for sentences with similar sense"],
      "correct_answer": "breaking down text into individual sentences"
    },
    {
      "question": "Single document of collection of documents in NLP is called ...",
      "options": ["Magazine", "DataFrame", "Data Set", "Corpus"],
      "correct_answer": "Corpus"
    },
    {
      "question": "When we have a ... to search in corpus we use regexp",
      "options": ["pattern", "rare word"],
      "correct_answer": "pattern"
    },
    {
      "question": "regexp /Buttercup/ matches nay string containing the substring ...",
      "options": ["Buttercup", "buttercup", "Butter"],
      "correct_answer": "Buttercup"
    },
    {
      "question": "Regular Expressions are case ... sensitive",
      "options": ["sensitive", "not sensitive"],
      "correct_answer": "sensitive"
    },
    {
      "question": "/[wW]oodchuck/ returns",
      "options": ["woodchuck or Woodchuck", "it is wrong regexp"],
      "correct_answer": "woodchuck or Woodchuck"
    },
    {
      "question": "/[2-5]/ searches for ...",
      "options": ["2 or 3 or 4 or 5", "3 or 4"],
      "correct_answer": "2 or 3 or 4 or 5"
    },
    {
      "question": "This regexp /[^aeiou]/ matches any single character that is ... a vowel",
      "options": ["is a vowel", "is not a vowel"],
      "correct_answer": "is not a vowel"
    },
    {
      "question": "/?/ means ...",
      "options": ["full match", "the preceding character or nothing"],
      "correct_answer": "the preceding character or nothing"
    },
    {
      "question": "In regexp <strong>Kleene *</strong> means ...",
      "options": ["zero or more occurrences of the immediately previous character", "cleany what?"],
      "correct_answer": "zero or more occurrences of the immediately previous character"
    },
    {
      "question": "n regexp <strong>Kleene +</strong> means ...",
      "options": ["zero or more occurrences of the immediately preceding character", "cleany what?"],
      "correct_answer": "zero or more occurrences of the immediately preceding character"
    },
    {
      "question": "/^The/ how does this regexp works",
      "options": ["matches 'The' only at the start of a line", "looks for last word 'The' in sentence and this is why regexp is wrong"],
      "correct_answer": "matches 'The' only at the start of a line"
    },
    {
      "question": "| means OR in regexp",
      "options": ["yes", "no"],
      "correct_answer": "yes"
    },
    {
      "question": "/{3}/ means",
      "options": ["exactly 3 occurrences of the previous character or regexp", "what is it?"],
      "correct_answer": "exactly 3 occurrences of the previous character or regexp"
    },
    {
      "question": "Module, that provides support for regular expressions in Python",
      "options": ["n√∂", "ja", "re"],
      "correct_answer": "re"
    },
    {
      "question": "",
      "options": ["", ""],
      "correct_answer": ""
    },
    {
      "question": "",
      "options": ["", ""],
      "correct_answer": ""
    },
    {
      "question": "",
      "options": ["", ""],
      "correct_answer": ""
    },
    {
      "question": "",
      "options": ["", ""],
      "correct_answer": ""
    },
    {
      "question": "",
      "options": ["", ""],
      "correct_answer": ""
    },
    {
      "question": "",
      "options": ["", ""],
      "correct_answer": ""
    },
    {
      "question": "",
      "options": ["", ""],
      "correct_answer": ""
    },
    {
      "question": "",
      "options": ["", ""],
      "correct_answer": ""
    },
    {
      "question": "",
      "options": ["", ""],
      "correct_answer": ""
    },
    {
      "question": "",
      "options": ["", ""],
      "correct_answer": ""
    },
    {
      "question": "",
      "options": ["", ""],
      "correct_answer": ""
    },
    {
      "question": "",
      "options": ["", ""],
      "correct_answer": ""
    },
    {
      "question": "",
      "options": ["", ""],
      "correct_answer": ""
    }
     
       
   
   ]
   