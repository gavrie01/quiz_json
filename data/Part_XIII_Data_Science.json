[
    {
       "question": "In case I want to take a look into pytorch model's details (i.e. model_2), how can I do this?",
       "options": ["model_2.parameters()", "model_2.state_dict()", "there is no such ability in Python"],
       "correct_answer": "model_2.state_dict()"
     },
    {
      "question": "kernel_size can be specified as (3,3)?",
      "options": ["no, only 'kernel_size = 3' works", "yes of course, kernel_size = (3,3) also works", "yes, but is should be [3,3]"],
      "correct_answer": "yes of course, kernel_size = (3,3) also works"
     },
     {
      "question": "object.unsqueeze(dim=0) and object.unsqueeze(0) are equivalent",
      "options": ["yes", "no"],
      "correct_answer": "yes"
    },
   {
     "question": "nn.MaxPool2d() layer compresses images' features",
     "options": ["yes", "no"],
     "correct_answer": "yes"
    },
    {
      "question": "What is POSIX?",
      "options": ["API collection to support processing of custom data sets in PyTorch", "Portable Operating System Interface - a set of standards specifying the interface between a user and the operating system (UNIX)"],
      "correct_answer": "Portable Operating System Interface - a set of standards specifying the interface between a user and the operating system (UNIX)"
    },
   {
     "question": "in Python,'glob' or 'globbing' is commonly used to describe the process of matching wildcard patterns against ...",
     "options": ["corpora in LM context", "file paths in a directory", "set of images in a context of central pixels"],
     "correct_answer": "file paths in a directory"
    },
    {
      "question": "In Python the ... block contains code that will be executed regardless of whether an exception occurs or not. It provides a way to ensure that certain code is always executed, whether an exception is raised or not",
      "options": ["try / except", "finally", "all the above"],
      "correct_answer": "finally"
    },
   {
     "question": "... in the context of CNNs is a technique used to artificially increase the diversity of a training dataset by applying various transformations to the existing images",
     "options": ["Data reduction", "Data augmentation", "Data labeling"],
     "correct_answer": "Data augmentation"
    },
    {
      "question": "Rotation, Flip, Resize, Shift, Brightness and Contrast, Shear etc ... used in CNN",
      "options": ["are reduction of dimensions", "are augmentation techniques", "allows CNN to recognize better what is on images"],
      "correct_answer": "are augmentation techniques"
    },
   {
     "question": "Augmentation techniques in torchvision can be applied ",
     "options": ["manually", "via transforms module"],
     "correct_answer": "via transforms module"
    },
    {
      "question": "If I apply 'image_path.parent.stem' to '/path/to/dataset/cat/image001.jpg', I get ...",
      "options": ["jpg", "dataset", "cat", "image001"],
      "correct_answer": "cat"
    },
   {
     "question": "in PyTorch, where is 'os.cpu_count()' used?",
     "options": ["evaluation", "DataLoader"],
     "correct_answer": "DataLoader"
    },
    {
      "question": "shuffle is used in machine learning ...",
      "options": ["to speed up the training process", "not to let the model recognize any order in data"],
      "correct_answer": "not to let the model recognize any order in data"
    },
   {
     "question": "gc.collect() is mostly used for",
     "options": ["immediate and guaranteed garbage collection of all objects in the code being run", "debugging purposes"],
     "correct_answer": "debugging purposes"
    },
    {
      "question": "What is a method in Python (simply speaking)?",
      "options": ["method is an action (verb), like 'start', 'set_value', etc", "method is a noun (no action) i.e. color, size"],
      "correct_answer": "method is an action (verb), like 'start', 'set_value', etc"
    },
   {
     "question": "... is a reference from an instance of a class to itself",
     "options": ["obj", "self", "this"],
     "correct_answer": "self"
    },
    {
      "question": " title = f'Class: {classes[targ_label]}' when executing this code ...",
      "options": ["run-time error happens", "executed successfully"],
      "correct_answer": "executed successfully"
    },
   {
     "question": "The expression 'image_path_list[:10]' in Python retrieves the ... 10 elements of the list image_path_list",
     "options": ["last", "first", "10 random one by one elements"],
     "correct_answer": "first"
    },
    {
      "question": "The expression 'image_path_list[-10:]' in Python retrieves the ... 10 elements of the list image_path_list",
      "options": ["last", "first", "run-time error"],
      "correct_answer": "last"
    },
   {
     "question": "The expression 'image_path_list[10:]' in Python retrieves the ... 10 elements of the list image_path_list",
     "options": ["all elements from index 10 to the end of the list 'image_path_list'", "last", "none of the above"],
     "correct_answer": "all elements from index 10 to the end of the list 'image_path_list'"
    },
    {
      "question": "Example of dunder methods in Python ...",
      "options": ["_ _init_ _", "print()", "type()"],
      "correct_answer": "__init__"
    },
   {
     "question": "What is correct: ...",
     "options": ["def __new__(cls):", "def __new__(cls, *args, **kwargs):", "def __new__(self, *args, **kwargs):"],
     "correct_answer": "def __new__(cls, *args, **kwargs):"
    },
    {
      "question": "In Python, all classes are subclasses of the built-in ... class.",
      "options": ["base", "object", "init"],
      "correct_answer": "object"
    },
   {
     "question": "In programming, ... is a mechanism to make the variable name more unique to avoid accidental name clashes in a class hierarchy",
     "options": ["Name mangling", "Name wrangling"],
     "correct_answer": "Name mangling"
    },{
      "question": "In Python, @callsmethod and @staticethod are ...",
      "options": ["decorators", "modifiers", "class extensions"],
      "correct_answer": "decorators"
    },
   {
     "question": "Class is a name space",
     "options": ["yes", "no"],
     "correct_answer": "yes"
    },
    {
      "question": "Boolean type is a subtype of Integer data type in Python",
      "options": ["True", "False"],
      "correct_answer": "True"
    },
   {
     "question": "self represents ...",
     "options": ["class itself", "instance of the class"],
     "correct_answer": "instance of the class"
    },
    {
      "question": "cls represents ...",
      "options": ["instance of the class", "class itself"],
      "correct_answer": "class itself"
    },
   {
     "question": "What is the difference between == and is?",
     "options": ["== Compares the values of two objects, while is compares memory addresses", " == compares immutables data types, while is compares only mutable"],
     "correct_answer": "== Compares the values of two objects, while is compares memory addresses"
    },
    {
      "question": "a = [1, 2, 3]<br>b = [1, 2, 3]<br>print(a is b) returns ...",
      "options": ["False", "True", "'is' is not applicable here"],
      "correct_answer": "False"
    },
   {
     "question": "str = '123456789'<br>str[3] = '45 returns ...'",
     "options": ["str object does not support item assignment, string data type is immutable", "1234556789"],
     "correct_answer": "str object does not support item assignment, string data type is immutable"
    },{
      "question": "Data types in Python are divided into:",
      "options": ["mutable and immutable", "public and private"],
      "correct_answer": "mutable and immutable"
    },
   {
     "question": "How mutable and immutable arguments are passed into a function?",
     "options": ["mutable - by value, immutable - by reference", "immutable - by value, mutable - by reference"],
     "correct_answer": "immutable - by value, mutable - by reference"
    },
    {
      "question": "def some_function(some_arg: list = None):<br>if some_arg is None:<br>some_arg = []<br>some_arg.append(1)<br>imagine thr indentation is correct, so the code return some_arg<br>print(some_function())<br>print(some_function()) returns ...",
      "options": ["[1], [1, 1]", "[1], [1]"],
      "correct_answer": "[1], [1, 1]"
    }
     
   ]
   